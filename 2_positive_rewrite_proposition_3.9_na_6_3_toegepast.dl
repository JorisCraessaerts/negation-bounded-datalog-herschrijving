.decl edge(x:number, y:number)
.input edge

// Active domain
.decl adom(x:number)
adom(x) :- edge(x, _).
adom(x) :- edge(_, x).

// T1-varianten (β  {x != z, y != x}, γ  {y != z, z != x})
.decl T1(z:number, x:number, x2:number, y2:number, x:number, y:number)
T1(z, x, x2, y2, x, y) :-
    edge(x, y),
    edge(y, z),
    adom(x2), adom(y2),
    x != z,
    y != z.

T1(z, x, x2, y2, x, y) :-
    edge(x, y),
    edge(y, z),
    adom(x2), adom(y2),
    x != z,
    z != x.

T1(z, x, x2, y2, x, y) :-
    edge(x, y),
    edge(y, z),
    adom(x2), adom(y2),
    y != x,
    y != z.

T1(z, x, x2, y2, x, y) :-
    edge(x, y),
    edge(y, z),
    adom(x2), adom(y2),
    y != x,
    z != x.

// T2-varianten (χ  {x != y, y != z}, γ  {y != z, z != x})
.decl T2(x1:number, y1:number, y:number, z:number, x:number, y:number)
T2(x1, y1, y, z, x, y) :-
    edge(x, y),
    edge(z, x),
    adom(x1), adom(y1),
    x != y,
    y != z.

T2(x1, y1, y, z, x, y) :-
    edge(x, y),
    edge(z, x),
    adom(x1), adom(y1),
    x != y,
    z != x.

T2(x1, y1, y, z, x, y) :-
    edge(x, y),
    edge(z, x),
    adom(x1), adom(y1),
    y != z,
    y != z.

T2(x1, y1, y, z, x, y) :-
    edge(x, y),
    edge(z, x),
    adom(x1), adom(y1),
    y != z,
    z != x.

// Output
.decl output0(x1:number, y1:number, x2:number, y2:number, x:number, y:number)
output0(x1, y1, x2, y2, x, y) :-
    edge(x, y),
    edge(y, z),
    edge(z, x),
    adom(x1), adom(y1),
    adom(x2), adom(y2).

// Combineer alle T1 en T2 combinaties
output0(x1, y1, x2, y2, x, y) :-
    T1(_, _, x2, y2, x, y),
    T2(x1, y1, _, _, x, y),
    x != y.

// Projectie naar eindresultaat
.decl result_positive_rewritten(x:number, y:number)
.output result_positive_rewritten
result_positive_rewritten(x, y) :- output0(_, _, _, _, x, y).
