.decl edge(x:number, y:number)
.input edge

// Active domain
.decl adom(x:number)
adom(x) :- edge(x, _).
adom(x) :- edge(_, x).

// T1-varianten (β  {x != z, y != x}, γ  {y != z, z != x})
.decl T1(x:number, y:number)
T1(x, y) :-
    edge(x, y),
    edge(y, z),
    x != z,
    y != z.

T1(x, y) :-
    edge(x, y),
    edge(y, z),
    x != z,
    z != x.

T1(x, y) :-
    edge(x, y),
    edge(y, z),
    y != x,
    y != z.

T1(x, y) :-
    edge(x, y),
    edge(y, z),
    y != x,
    z != x.

// T2-varianten (χ  {x != y, y != z}, γ  {y != z, z != x})
.decl T2(x:number, y:number)
T2(x, y) :-
    edge(x, y),
    edge(z, x),
    x != y,
    y != z.

T2(x, y) :-
    edge(x, y),
    edge(z, x),
    x != y,
    z != x.

T2(x, y) :-
    edge(x, y),
    edge(z, x),
    y != z,
    y != z.

T2(x, y) :-
    edge(x, y),
    edge(z, x),
    y != z,
    z != x.

// Output
.decl output0(x:number, y:number)
output0(x, y) :-
    edge(x, y),
    edge(y, z),
    edge(z, x).

output0(x, y) :-
    T1(x, y),
    T2(x, y),
    x != y.

// Projectie naar eindresultaat
.decl result_positive_rewritten(x:number, y:number)
.output result_positive_rewritten
result_positive_rewritten(x, y) :- output0(x, y).
