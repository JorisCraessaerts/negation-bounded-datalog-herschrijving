// Input relaties
.decl R(source: symbol, target: symbol)
.decl S(source: symbol, target: symbol)

// Intermediate (hulp) relaties
.decl HasR_NotS(target: symbol, source: symbol)
.decl HasS_NotR(target: symbol, source: symbol)

// Output relatie
.decl Target(target_node: symbol)

// Input/Output
// Laad data uit .facts bestanden (tab-gescheiden).
.input R(filename="R.facts")
.input S(filename="S.facts")

// Schrijf de resultaten naar een .csv bestand.
.output Target(filename="Target.csv")


// Datalog Regels
HasR_NotS(x, y) :- R(y, x), !S(y, x). // Extra S(y, x) feiten hier gaan ervoor zorgen dat de HasR_NotS(x, y) regel gaat falen. Maar dit zorgt er tegelijk voor dat de directe regel Target(x) :- R(y, x), S(y, x). wel gaat lukken waardoor er nog steeds extra output gegenereerd wordt.
HasS_NotR(x, z) :- S(z, x), !R(z, x). // Extra R(z, x) feiten hier gaan ervoor zorgen dat de HasS_NotR(x, z) regel gaat falen. Tegelijk gaat hierdoor wel de tweede directe Target(x) :- R(y, x), S(y, x). regel op dat moment wel lukken, waardoor er nog steeds extra output gegenereerd wordt en het programma dus monotoon is.

// Het programma is negation bounded: In de directe positieve regel is er geen negatie.com
// De combinatieregel is echter afhankelijk van maximum twee regels (HasR_NotS en HasS_NotR) om tot een feit te bekomen. Elk van deze HasR_NotS en HasS_NotR heeft één negatie, dus het maximum aantal negaties dat nodig zal zijn om output te kunnen afleiden zal altijd 2 zijn.


// Output regels die het eindresultaat berekenen.
// 1. De 'directe' positieve regel.
Target(x) :- R(y, x), S(y, x).

// 2. De 'indirecte' regel die de hulp-regels combineert.
Target(x) :- HasR_NotS(x, y), HasS_NotR(x, z).