// Invoertabel: directe verbindingen in een gerichte graaf
.decl edge(x:number, y:number)
.input edge

// Relaties die het domein beperken tot bestaande edges
// edge_zx simuleert het domein waarop ¬edge(z,x) geëvalueerd wordt
.decl edge_zx(z:number, x:number)
edge_zx(z, x) :- edge(z, x).

// edge_yz simuleert het domein waarop ¬edge(y,z) geëvalueerd wordt
.decl edge_yz(y:number, z:number)
edge_yz(y, z) :- edge(y, z).

// T1 detecteert een open driehoek van de vorm x -> y -> z waarbij z -> x ontbreekt
.decl T1(x:number, y:number, x2:number, y2:number)
T1(x, y, x2, y2) :-
    edge(x, y),
    edge(y, z),
    edge_zx(x2, y2),
    (z != x2 ; x != y2).

// T2 detecteert een open driehoek van de vorm y -> x -> z waarbij y -> z ontbreekt
.decl T2(x:number, y:number, x2:number, y2:number)
T2(x, y, x2, y2) :-
    edge(y, x),
    edge(x, z),
    edge_yz(x2, y2),
    (z != y2 ; y != x2).

// result_prime bevat:
// 1) gesloten driehoeken x -> y -> z -> x
// 2) of combinaties van T1 ∧ T2 met x != y
.decl result_prime(x:number, y:number, x2:number, y2:number)
result_prime(x, y, x2, y2) :-
    edge(x, y),
    edge(y, z),
    edge(z, x),
    edge_zx(x2, y2). // deze beperking maakt evaluatie consistenter

result_prime(x, y, x2, y2) :-
    T1(x, y, x2, y2),
    T2(x, y, x2, y2),
    x != y.

// Eindresultaat: enkel (x, y) paren
.decl result_positive_rewritten(x:number, y:number)
.output result_positive_rewritten
result_positive_rewritten(x, y) :-
    result_prime(x, y, _, _).
