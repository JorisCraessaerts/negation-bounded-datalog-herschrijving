.decl edge(x:number, y:number)
.input edge

// Domein (nodig voor inequalities). We gaan het active domaine opstellen zodat we vervolgens later voor elk element van dit active domain een inequality kunnen opstellen om zo de bestaat niet te simuleren.
.decl adom(x:number)
adom(x) :- edge(x, _).
adom(x) :- edge(_, x).

// Hier "simuleer" ik de ¬edge(z, x) door (z,x) != (x2,y2)
.decl T1(x:number, y:number, x2:number, y2:number)
T1(x, y, x2, y2) :-
    edge(x, y),
    edge(y, z),
    adom(x2), adom(y2),
    (z != x2 ; x != y2).

// Simuleer ¬edge(y, z) door (y,z) != (x2,y2)
.decl T2(x:number, y:number, x2:number, y2:number)
T2(x, y, x2, y2) :-
    edge(y, x),
    edge(x, z),
    adom(x2), adom(y2),
    (z != y2; y != x2).

.decl result_prime(x:number, y:number, x2:number, y2:number)
result_prime(x, y, x2, y2) :- edge(x, y), edge(y, z), edge(z, x), adom(x2), adom(y2).
result_prime(x, y, x2, y2) :- T1(x, y, x2, y2), T2(x, y, x2, y2), x != y.

.decl result_positive_rewritten(x:number, y:number)
.output result_positive_rewritten
result_positive_rewritten(x, y) :- result_prime(x, y, _, _).

// Deze query is extreem traag omdat we op deze manier het active domain gaan bepalen voor x2 en y2. Dan gaan we elke mogelijke combinatie uittesten voor x2 x y2 om de T1 regel te gaan bepalen.
// Vervolgens gaat men voor elk van deze gevonden T1's opnieuw een cartesian product van x2 x y2 nemen om T2 te gaan bepalen. Eigenlijk gaat men dus potentieel voor miljoenen uitkomsten van T1 nogmaals miljoenen tot miljarden keren het cartesisch product gaan nemen om T2 te berekenen?
